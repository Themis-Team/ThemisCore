/*!
  \file model_image_ipole.h
  \author Roman Gold, Monika Moscibrodzka, Shan-Shan Zhao 
  \date Nov, 2018
  \brief Header file for ipole driver.
  \details To be added
*/

#ifndef Themis_MODEL_IMAGE_ipole_H_
#define Themis_MODEL_IMAGE_ipole_H_

#include "model_image.h"
#include "iostream"
#include "fstream"
#include <vector>

namespace Themis {

/*!
  \brief Defines an interface to ipole to produce and read in images
  model based on the model_image class.  This is an explicit example
  of a model_image object.

  \details The image is computed by the external radiative transfer
  code ipole.


Parameter list:\n
 parameters[0] ... Density normalization/scale inside ipole.\n
 parameters[1] ... Inclination angle inside ipole in radians.\n
 parameters[2] ... Isothermal electron temperature assumed in the jet/funnel region where ideal MHD is not to be trusted.\n
 parameters[3] ... Azimuthal viewing angle inside ipole.\n

*/
class model_image_ipole : public model_image
{

 private:
  //! Generates and returns rectalinear grid of intensities from an
  //! image model generated by the external radiative transfer code
  //! ipole in Jy/pixel located at pixels centered on angular
  //! positions alpha and beta, both specified in radians and aligned
  //! with a fiducial direction.  Note that the parameter vector has
  //! had the position removed.
  virtual void generate_image(std::vector<double> parameters, std::vector<std::vector<double> >& I, std::vector<std::vector<double> >& alpha, std::vector<std::vector<double> >& beta);

  
 public:
  model_image_ipole();
  virtual ~model_image_ipole() {};

  virtual double visibility_amplitude(datum_visibility_amplitude& d, double acc);

  //! \brief Sets model_image_ipole to generate production images with
  //! resolution Nray x Nray. The default is 128x128, which is probably
  //! larger than required in practice.      
  void set_image_resolution(int Nray);

  //! set the field of view in radius
  void set_FOV(double FOV);

  //If only sitting one parameter, using this scentence
  void set_fit_one_param(bool if_onepar, int param_num);

  //read-in ipole image named im_filename  
  void image_file_name(std::string im_filename);

  //set tag in temperary ipole file name, ipole_tag_rank  
  void set_tag(std::string tag);

  //set the value of R_low
  void set_Rlow(double Rlow);

  //! A user-supplied function that returns the number of the parameters the model expects
  virtual inline size_t size() const { return 4; };
  
  //! Return a string that contains a unique identifying tag for use with the ThemisPy plotting features.
  virtual std::string model_tag() const
  {
    return "model_image_ipole";
  };

 private:
  /* double _Itotal; //!< Internal total intensity. */
  /* double _sigma_alpha; //!< Std. dev. in fiducial horizontal direction. */
  /* double _sigma_beta; //!< Std. dev. in fiducial vertical direction. */

  double _th;
  double _Munit;
  double _trat_j;
  double _trat_d;
  double _Nray;
  double _FOVx;
  double _FOVy;
  bool _fit_onepar; //!< True for only fitting one parameter. */
  int _param_num; //The tag of fitting which parameter, 1 is _th, 2 is _Munit, 3 is _trat_j, 4 is PA(_im_filename should be given).
  std::string _im_filename;
  std::string _tag;
};

};
#endif
