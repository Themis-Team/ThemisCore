/*!
  \file model_image_grtrans.h
  \author Roman Gold
  \date  June, 2017
  \brief Header file for grtrans driver.
  \details To be added
*/

#ifndef Themis_MODEL_IMAGE_GRTRANS_H_
#define Themis_MODEL_IMAGE_GRTRANS_H_

#include "model_image.h"
#include "iostream"
#include "fstream"
#include <sstream>
#include <vector>
#include <string>


namespace Themis {

/*!
  \brief Defines an interface to GRTRANS to produce and read in images
  model based on the model_image class.  This is an explicit example
  of a model_image object.

  \details The image is computed by the external radiative transfer
  code GRTRANS.


Parameter list:\n
 parameters[0] ... Density normalization/scale inside GRTRANS.\n
 parameters[1] ... Inclination angle inside GRTRANS in radians.\n
 parameters[2] ... Isothermal electron temperature assumed in the jet/funnel region where ideal MHD is not to be trusted.\n
 parameters[3] ... Azimuthal viewing angle inside GRTRANS.\n

*/
class model_image_grtrans : public model_image
{

 private:
  //! Generates and returns rectalinear grid of intensities from an
  //! image model generated by the external radiative transfer code
  //! GRTRANS in Jy/str located at pixels centered on angular
  //! positions alpha and beta, both specified in radians and aligned
  //! with a fiducial direction.  Note that the parameter vector has
  //! had the position removed.
  virtual void generate_image(std::vector<double> parameters, std::vector<std::vector<double> >& I, std::vector<std::vector<double> >& alpha, std::vector<std::vector<double> >& beta);
  
 public:
  model_image_grtrans();
  virtual ~model_image_grtrans() {};

  virtual double visibility_amplitude(datum_visibility_amplitude& d, double acc);

  //! A user-supplied function that returns the number of the parameters the model expects
  virtual inline size_t size() const { return 4; };
  //! Convert a double variable to string 
  std::string dtos(double);  

  //! Return a string that contains a unique identifying tag for use with the ThemisPy plotting features.
  virtual std::string model_tag() const
  {
    return "model_image_grtrans";
  };
  
 private:
  /* double _Itotal; //!< Internal total intensity. */
  /* double _sigma_alpha; //!< Std. dev. in fiducial horizontal direction. */
  /* double _sigma_beta; //!< Std. dev. in fiducial vertical direction. */

  double _mdot; // assume mdotmin=mdotmax in grtrans
  double _th;
  double _phi0;
  double _muval; //related to electron temperature
  double _spin;

  /* bool _use_analytical_visibilities; //!< If true uses analytical visibility computation, if false use numerical visibilities. */
  
};

};
#endif
